// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedWorkspaces    Workspace[]        @relation("WorkspaceOwner")
  workspaceMembers   WorkspaceMember[]
  channelMembers     ChannelMember[]
  messages          Message[]
  sentInvites       Invite[]           @relation("InviteSender")
  readReceipts      ReadReceipt[]
  uploadedFiles     File[]
  auditLogs         AuditLog[]

  @@map("users")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  avatar      String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner       User               @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     WorkspaceMember[]
  channels    Channel[]
  dmThreads   DMThread[]
  invites     Invite[]
  files       File[]
  auditLogs   AuditLog[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String   @id @default(cuid())
  workspaceId String
  userId      String
  role        Role     @default(member)
  joinedAt    DateTime @default(now())

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model Channel {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  description String?
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workspace Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  members   ChannelMember[]
  messages  Message[]

  @@unique([workspaceId, name])
  @@index([workspaceId, name])
  @@map("channels")
}

model ChannelMember {
  id        String   @id @default(cuid())
  channelId String
  userId    String
  joinedAt  DateTime @default(now())

  // Relations
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
  @@map("channel_members")
}

model Message {
  id          String   @id @default(cuid())
  channelId   String?  // Channel ID (if roomType is channel)
  dmThreadId  String?  // DM Thread ID (if roomType is dm)
  roomType    RoomType
  authorId    String
  content     String
  parentId    String?  // For thread replies
  threadCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author     User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  channel    Channel?     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  dmThread   DMThread?    @relation(fields: [dmThreadId], references: [id], onDelete: Cascade)
  parent     Message?     @relation("MessageThread", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Message[]    @relation("MessageThread")
  attachments Attachment[]
  readReceipts ReadReceipt[]

  @@index([channelId, createdAt(sort: Desc)])
  @@index([dmThreadId, createdAt(sort: Desc)])
  @@map("messages")
}

model Attachment {
  id           String   @id @default(cuid())
  messageId    String
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  thumbnailUrl String?
  createdAt    DateTime @default(now())

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model DMThread {
  id             String   @id @default(cuid())
  workspaceId    String
  participants   String[] // Array of user IDs
  lastMessageAt  DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@unique([workspaceId, participants(sort: Asc)])
  @@map("dm_threads")
}

model ReadReceipt {
  id         String   @id @default(cuid())
  channelId  String?  // Channel ID (if roomType is channel)
  dmThreadId String?  // DM Thread ID (if roomType is dm)
  roomType   RoomType
  userId     String
  messageId  String
  lastSeenAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
  @@unique([dmThreadId, userId])
  @@map("read_receipts")
}

model Invite {
  id          String   @id @default(cuid())
  workspaceId String
  email       String
  role        Role     @default(member)
  invitedBy   String
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  sender    User      @relation("InviteSender", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([workspaceId, email])
  @@map("invites")
}

model File {
  id           String   @id @default(cuid())
  workspaceId  String
  uploadedBy   String
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  thumbnailUrl String?
  createdAt    DateTime @default(now())

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("files")
}

model AuditLog {
  id           String   @id @default(cuid())
  workspaceId  String
  userId       String
  action       String
  resourceType String
  resourceId   String
  details      Json
  createdAt    DateTime @default(now())

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([workspaceId, createdAt(sort: Desc)])
  @@map("audit_logs")
}

enum Role {
  owner
  admin
  member
}

enum RoomType {
  channel
  dm
}
