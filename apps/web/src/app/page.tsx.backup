"use client";

import { useState, useRef, useEffect } from "react";
import Link from "next/link";
import MobileNavigation from "@/components/mobile-navigation";
import SignaturePad from "@/components/signature-pad";

export default function Home() {
  // State for sidebar
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [showMoreMenu, setShowMoreMenu] = useState(false);

  // State for messages
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "Welcome to ChatDO! 🚛",
      user: "System",
      timestamp: "12:00 PM",
    },
  ]);

  // State for UI
  const [newMessage, setNewMessage] = useState("");
  const [channels, setChannels] = useState([
    { id: 1, name: "general", description: "General discussion channel", visibility: "public", doorNumber: "", unread: 0, active: true },
    { id: 2, name: "logistics", description: "Logistics and delivery coordination", visibility: "public", doorNumber: "", unread: 3, active: false },
    { id: 3, name: "maintenance", description: "Vehicle maintenance and repairs", visibility: "private", doorNumber: "", unread: 1, active: false },
  ]);

  const [directMessages, setDirectMessages] = useState([
    {
      id: 1,
      name: "John Driver",
      avatar: "JD",
      unread: 2,
      phone: "+1-555-0101",
    },
    {
      id: 2,
      name: "Sarah Dispatcher",
      avatar: "SD",
      unread: 0,
      phone: "+1-555-0102",
    },
    {
      id: 3,
      name: "Mike Mechanic",
      avatar: "MM",
      unread: 5,
      phone: "+1-555-0103",
    },
  ]);

  // State for modals
  const [showCreateChannelModal, setShowCreateChannelModal] = useState(false);
  const [newChannelName, setNewChannelName] = useState("");
  const [newChannelDescription, setNewChannelDescription] = useState("");
  const [newChannelVisibility, setNewChannelVisibility] = useState("public");
  const [newChannelDoorNumber, setNewChannelDoorNumber] = useState("");
  const [showCreateDMModal, setShowCreateDMModal] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [showPushToTalk, setShowPushToTalk] = useState(false);
  const [showDocumentManager, setShowDocumentManager] = useState(false);
  const [showSignaturePad, setShowSignaturePad] = useState(false);
  const [showSignatureDropdown, setShowSignatureDropdown] = useState(false);
  const [showAddSignatureModal, setShowAddSignatureModal] = useState(false);
  const [newSignatureName, setNewSignatureName] = useState("");
  const [newSignatureType, setNewSignatureType] = useState<"auto" | "draw">("auto");
  const [savedSignatures, setSavedSignatures] = useState<Array<{ name: string; dataUrl: string }>>([]);
  const [selectedSignature, setSelectedSignature] = useState<{ name: string; dataUrl: string } | null>(null);
  const [showSignatureViewer, setShowSignatureViewer] = useState(false);
  const [viewingSignature, setViewingSignature] = useState<{ name: string; dataUrl: string } | null>(null);
  const [showSignatureManager, setShowSignatureManager] = useState(false);
  const [userName, setUserName] = useState("John Doe"); // Default user name - in real app this would come from auth
  
  // Function to update user name
  const updateUserName = (newName: string) => {
    setUserName(newName);
    // In a real app, this would also update the user's profile in the database
  };
  const [showAttachmentMenu, setShowAttachmentMenu] = useState(false);
  const [showImageSubmenu, setShowImageSubmenu] = useState(false);
  const [showVideoSubmenu, setShowVideoSubmenu] = useState(false);
  
  // State for settings pages
  const [showAccountPage, setShowAccountPage] = useState(false);
  const [showProfilePage, setShowProfilePage] = useState(false);
  const [showHelpPage, setShowHelpPage] = useState(false);
  
  // State for mobile navigation
  const [activeMobileTab, setActiveMobileTab] = useState("home");

  // State for current chat
  const [currentChannel, setCurrentChannel] = useState("general");
  const [currentDM, setCurrentDM] = useState(null);
  const [channelMessages, setChannelMessages] = useState({
    general: [
      {
        id: 1,
        text: "Welcome to the general channel! 🚛",
        user: "System",
        timestamp: "12:00 PM",
      },
    ],
  });

  // State for documents
  const [documents, setDocuments] = useState([
    {
      id: 1,
      name: "Delivery Schedule.pdf",
      type: "pdf",
      size: "2.3 MB",
      date: "2024-01-15",
    },
    {
      id: 2,
      name: "Maintenance Log.xlsx",
      type: "document",
      size: "1.1 MB",
      date: "2024-01-14",
    },
  ]);
  const [documentsExpanded, setDocumentsExpanded] = useState(false);
  const [currentDocument, setCurrentDocument] = useState(null);

  // State for recording
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);

  // Refs
  const messagesEndRef = useRef(null);
  const moreMenuRef = useRef(null);
  const settingsRef = useRef(null);

  // Auto-scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, channelMessages]);

  // Close more menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        moreMenuRef.current &&
        !(moreMenuRef.current as any).contains(event.target)
      ) {
        setShowMoreMenu(false);
      }
      if (
        settingsRef.current &&
        !(settingsRef.current as any).contains(event.target)
      ) {
        setShowSettings(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Recording timer
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isRecording) {
      interval = setInterval(() => {
        setRecordingTime((prev) => prev + 1);
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [isRecording]);

  // Functions
  const sendMessage = () => {
    if (newMessage.trim()) {
      const newMsg = {
        id: Date.now(),
        text: newMessage,
        user: "You",
        timestamp: new Date().toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        }),
      };

      if (currentChannel) {
        setChannelMessages((prev) => ({
          ...prev,
          [currentChannel]: [...(prev[currentChannel] || []), newMsg],
        }));
      } else if (currentDM) {
        setMessages([...messages, newMsg]);
      }

      setNewMessage("");
    }
  };

  const switchToChannel = (channelName: string) => {
    setCurrentChannel(channelName);
    setCurrentDM(null);
    setChannels(
      channels.map((ch) => ({
        ...ch,
        active: ch.name === channelName,
        unread: 0,
      }))
    );
  };

  const switchToDM = (dm: any) => {
    setCurrentDM(dm);
    setCurrentChannel(null);
    setDirectMessages(
      directMessages.map((d) => (d.id === dm.id ? { ...d, unread: 0 } : d))
    );
  };

  const startRecording = () => {
    setIsRecording(true);
    setRecordingTime(0);
  };

  const stopRecording = () => {
    setIsRecording(false);
    const newMsg = {
      id: Date.now(),
      text: `🎤 Voice message (${recordingTime}s)`,
      user: "You",
      timestamp: new Date().toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
      }),
    };

    if (currentChannel) {
      setChannelMessages((prev) => ({
        ...prev,
        [currentChannel]: [...(prev[currentChannel] || []), newMsg],
      }));
    } else if (currentDM) {
      setMessages([...messages, newMsg]);
    }

    setRecordingTime(0);
  };

  const handleDocumentUpload = () => {
    // Open document folder/file picker
    const input = document.createElement("input");
    input.type = "file";
    input.accept =
      ".pdf,.doc,.docx,.txt,.rtf,.odt,.pages,.xls,.xlsx,.csv,.ppt,.pptx,.key";
    input.multiple = true;
    input.onchange = (e) => {
      const files = (e.target as HTMLInputElement).files;
      if (files && files.length > 0) {
        Array.from(files).forEach((file) => {
          const newMsg = {
            id: Date.now() + Math.random(),
            text: `📄 Attached document: ${file.name}`,
            user: "You",
            timestamp: new Date().toLocaleTimeString([], {
              hour: "2-digit",
              minute: "2-digit",
            }),
          };
          if (currentChannel) {
            setChannelMessages((prev) => ({
              ...prev,
              [currentChannel]: [...(prev[currentChannel] || []), newMsg],
            }));
          } else if (currentDM) {
            setMessages([...messages, newMsg]);
          }
        });
      }
    };
    input.click();
  };

  const handleImagePicker = () => {
    // Simulate image picker from library
    const input = document.createElement("input");
    input.type = "file";
    input.accept = "image/*";
    input.onchange = (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (file) {
        const newMsg = {
          id: Date.now(),
          text: `🖼️ Attached image: ${file.name}`,
          user: "You",
          timestamp: new Date().toLocaleTimeString([], {
            hour: "2-digit",
            minute: "2-digit",
          }),
        };
        if (currentChannel) {
          setChannelMessages((prev) => ({
            ...prev,
            [currentChannel]: [...(prev[currentChannel] || []), newMsg],
          }));
        } else if (currentDM) {
          setMessages([...messages, newMsg]);
        }
      }
    };
    input.click();
  };

  const generateAutoSignature = (name: string) => {
    // Create a canvas to generate a realistic handwritten signature
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    if (!ctx) return '';
    
    canvas.width = 350;
    canvas.height = 80;
    
    // Set background to transparent
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Create a realistic handwritten signature
    const words = name.split(' ');
    let currentX = 20;
    const baseY = 50;
    
    // Draw each word with handwritten style
    words.forEach((word, index) => {
      // Use a more realistic handwritten font
      const fontSize = index === 0 ? 32 : 28;
      ctx.font = `${fontSize}px "Segoe Script", "Brush Script MT", cursive, serif`;
      
      // Add slight rotation and positioning for realism
      const rotation = (Math.random() - 0.5) * 0.15;
      const yOffset = (Math.random() - 0.5) * 8;
      
      ctx.save();
      ctx.translate(currentX, baseY + yOffset);
      ctx.rotate(rotation);
      
      // Draw the text with realistic pen stroke
      ctx.fillStyle = '#000000';
      ctx.lineWidth = 1.5;
      ctx.strokeStyle = '#000000';
      
      // Create a more realistic stroke by drawing multiple times with slight offsets
      for (let i = 0; i < 3; i++) {
        const offset = i * 0.3;
        ctx.fillText(word, offset, offset);
      }
      
      ctx.restore();
      
      // Move to next word position with realistic spacing
      const wordWidth = ctx.measureText(word).width;
      currentX += wordWidth + (index === 0 ? 8 : 12);
    });
    
    // Add a realistic signature underline
    ctx.save();
    ctx.strokeStyle = '#000000';
    ctx.lineWidth = 1.5;
    ctx.lineCap = 'round';
    
    const underlineY = baseY + 15;
    ctx.beginPath();
    ctx.moveTo(15, underlineY);
    
    // Create a natural squiggly underline
    for (let i = 0; i < currentX - 10; i += 3) {
      const wave = Math.sin(i * 0.08) * 1.5 + Math.sin(i * 0.15) * 0.8;
      ctx.lineTo(15 + i, underlineY + wave);
    }
    ctx.stroke();
    ctx.restore();
    
    return canvas.toDataURL('image/png');
  };

  const handleVideoPicker = () => {
    // Simulate video picker from library
    const input = document.createElement("input");
    input.type = "file";
    input.accept = "video/*";
    input.onchange = (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (file) {
        const newMsg = {
          id: Date.now(),
          text: `🎥 Attached video: ${file.name}`,
          user: "You",
          timestamp: new Date().toLocaleTimeString([], {
            hour: "2-digit",
            minute: "2-digit",
          }),
        };
        if (currentChannel) {
          setChannelMessages((prev) => ({
            ...prev,
            [currentChannel]: [...(prev[currentChannel] || []), newMsg],
          }));
        } else if (currentDM) {
          setMessages([...messages, newMsg]);
        }
      }
    };
    input.click();
  };

  const openDocument = (doc: any) => {
    setCurrentDocument(doc);
    setShowDocumentManager(true);
  };

  return (
    <div className="h-screen bg-slate-900 text-white flex flex-col md:flex-row">
      {/* Sidebar - Hidden on mobile, visible on desktop */}
      <div
        className={`hidden md:flex ${
          sidebarCollapsed ? "w-16" : "w-80"
        } bg-slate-800 border-r border-slate-700 flex-col transition-all duration-300`}
      >
        {/* Header */}
        <div className="p-4 border-b border-slate-700">
          <div className="flex items-center justify-between">
            {!sidebarCollapsed && (
              <h1 className="text-white font-semibold">ChatDO</h1>
            )}
            <button
              onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
              className="text-slate-400 hover:text-white p-1 rounded hover:bg-slate-700"
            >
              {sidebarCollapsed ? "☰" : "◀"}
            </button>
          </div>
        </div>

        {/* Scrollable Content */}
        <div className="flex-1 overflow-hidden">
          <div className="h-full overflow-y-auto p-4">
            {/* Collapsed Sidebar Icons */}
            {sidebarCollapsed ? (
              <div className="space-y-4">
                {/* Home/Dashboard */}
                <div className="flex flex-col items-center">
                  <Link href="/home" className="flex flex-col items-center">
                    <div className="w-10 h-10 bg-slate-700 rounded-lg flex items-center justify-center text-white hover:bg-slate-600 transition-colors">
                      🏠
                    </div>
                    <span className="text-xs text-slate-400 mt-1">Home</span>
                  </Link>
                </div>

                {/* DMs */}
                <div className="flex flex-col items-center">
                  <Link href="/dms" className="flex flex-col items-center">
                    <div className="w-10 h-10 bg-slate-700 rounded-lg flex items-center justify-center text-white hover:bg-slate-600 transition-colors">
                      💬
                    </div>
                    <span className="text-xs text-slate-400 mt-1">DMs</span>
                  </Link>
                </div>

                {/* Files/Documents */}
                <div className="flex flex-col items-center">
                  <Link
                    href="/documents"
                    className="flex flex-col items-center"
                  >
                    <div className="w-10 h-10 bg-slate-700 rounded-lg flex items-center justify-center text-white hover:bg-slate-600 transition-colors">
                      📁
                    </div>
                    <span className="text-xs text-slate-400 mt-1">Files</span>
                  </Link>
                </div>

                {/* Activity */}
                <div className="flex flex-col items-center">
                  <Link href="/activity" className="flex flex-col items-center">
                    <div className="w-10 h-10 bg-slate-700 rounded-lg flex items-center justify-center text-white hover:bg-slate-600 transition-colors">
                      🔔
                    </div>
                    <span className="text-xs text-slate-400 mt-1">
                      Activity
                    </span>
                  </Link>
                </div>
              </div>
            ) : (
              <>
                {/* Text Channels */}
                <div className="mb-6">
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="text-xs font-semibold text-blue-300 uppercase tracking-wider">
                      TEXT CHANNELS
                    </h3>
                    <button
                      onClick={() => setShowCreateChannelModal(true)}
                      className="text-blue-300 hover:text-blue-200 text-lg font-semibold"
                    >
                      +
                    </button>
                  </div>
                  <div className="space-y-1">
                    {channels.map((channel) => (
                      <div
                        key={channel.id}
                        className={`flex flex-col px-2 py-1 rounded group cursor-pointer ${
                          channel.active
                            ? "bg-slate-700"
                            : "text-slate-300 hover:bg-slate-700"
                        }`}
                        onClick={() => switchToChannel(channel.name)}
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <span className="text-blue-300">#</span>
                            <span
                              className={
                                channel.active ? "text-blue-200 font-medium" : "text-blue-200"
                              }
                            >
                              {channel.name}
                            </span>
                            {channel.visibility === "private" && (
                              <span className="text-slate-500 text-xs">🔒</span>
                            )}
                          </div>

                        </div>
                        {channel.description && (
                          <div className="ml-6 mt-1">
                            <p className="text-xs text-slate-500 truncate">
                              {channel.description}
                            </p>
                          </div>
                        )}
                        {channel.doorNumber && (
                          <div className="ml-6 mt-1">
                            <p className="text-xs text-blue-400 font-medium">
                              🚪 {channel.doorNumber}
                            </p>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>

                {/* Direct Messages */}
                <div className="mb-6">
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="text-xs font-semibold text-blue-300 uppercase tracking-wider">
                      DIRECT MESSAGES
                    </h3>
                    <button
                      onClick={() => setShowCreateDMModal(true)}
                      className="text-blue-300 hover:text-blue-200 text-lg font-semibold"
                    >
                      +
                    </button>
                  </div>
                  <div className="space-y-1">
                    {directMessages.map((dm) => (
                      <div
                        key={dm.id}
                        onClick={() => switchToDM(dm)}
                        className="flex items-center justify-between px-2 py-1 text-blue-200 hover:bg-slate-700 rounded group cursor-pointer"
                      >
                        <div className="flex items-center space-x-2">
                          <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                            <span className="text-xs text-white font-bold">
                              {dm.avatar}
                            </span>
                          </div>
                          <span>{dm.name}</span>
                        </div>

                      </div>
                    ))}
                  </div>
                </div>

                {/* Documents */}
                <div className="mb-6">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-2">
                      <Link
                        href="/documents"
                        className="flex items-center space-x-2 cursor-pointer hover:bg-slate-700 px-2 py-1 rounded transition-colors"
                      >
                        <h3 className="text-xs font-semibold text-blue-300 uppercase tracking-wider">
                          DOCUMENTS
                        </h3>
                        <span className="text-xs text-slate-500">
                          ({documents.length})
                        </span>
                      </Link>
                      <button
                        onClick={() => setDocumentsExpanded(!documentsExpanded)}
                        className="text-slate-400 hover:text-white text-xs"
                      >
                        {documentsExpanded ? "▼" : "▶"}
                      </button>
                    </div>
                    <button
                      onClick={() => {
                        const input = document.createElement("input");
                        input.type = "file";
                        input.multiple = true;
                        input.accept = "*/*";
                        input.onchange = (e) => {
                          const files = (e.target as HTMLInputElement).files;
                          if (files) {
                            Array.from(files).forEach((file) => {
                              const newDoc = {
                                id: Date.now() + Math.random(),
                                name: file.name,
                                type: file.type.includes("image")
                                  ? "image"
                                  : file.type.includes("video")
                                  ? "video"
                                  : "document",
                                size: `${(file.size / (1024 * 1024)).toFixed(
                                  1
                                )} MB`,
                                date: new Date().toISOString().split("T")[0],
                              };
                              setDocuments((prev) => [...prev, newDoc]);
                            });
                          }
                        };
                        input.click();
                      }}
                      className="text-blue-300 hover:text-blue-200 text-lg font-semibold"
                    >
                      +
                    </button>
                  </div>

                  {documentsExpanded && (
                    <div className="space-y-1 max-h-48 overflow-y-auto">
                      {documents.slice(0, 5).map((doc) => (
                        <div
                          key={doc.id}
                          onClick={() => openDocument(doc)}
                          className="flex items-center justify-between px-2 py-1 text-blue-200 hover:bg-slate-700 rounded group cursor-pointer"
                        >
                          <div className="flex items-center space-x-2 min-w-0 flex-1">
                            <span className="text-sm">📄</span>
                            <span className="text-sm truncate">{doc.name}</span>
                          </div>
                        </div>
                      ))}
                      {/* View All Documents Link */}
                      <div className="pt-2 border-t border-slate-700">
                        <Link
                          href="/documents"
                          className="flex items-center space-x-2 px-2 py-1 text-blue-400 hover:text-blue-300 hover:bg-slate-700 rounded group cursor-pointer"
                        >
                          <span className="text-sm">📁</span>
                          <span className="text-sm">View All Documents</span>
                        </Link>
                      </div>
                    </div>
                  )}
                </div>

                {/* Activities */}
                <div className="mb-6">
                  <div className="flex items-center justify-between mb-3">
                    <Link
                      href="/activity"
                      className="flex items-center space-x-2 cursor-pointer hover:bg-slate-700 px-2 py-1 rounded transition-colors"
                    >
                      <h3 className="text-xs font-semibold text-blue-300 uppercase tracking-wider">
                        ACTIVITIES
                      </h3>
                      <span className="text-xs text-slate-500">
                        (12)
                      </span>
                    </Link>
                  </div>
                </div>

                {/* E-Signature */}
                <div className="mb-6">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-2 cursor-pointer hover:bg-slate-700 px-2 py-1 rounded transition-colors group">
                      <h3 className="text-xs font-semibold text-blue-300 uppercase tracking-wider">
                        E-SIGNATURE
                      </h3>
                      <span className="text-xs text-slate-500">
                        ✏️
                      </span>
                      <button
                        onClick={() => setShowSignatureDropdown(!showSignatureDropdown)}
                        className="text-xs text-blue-300 hover:text-blue-200 transition-colors"
                      >
                        {showSignatureDropdown ? "▼" : "▶"}
                      </button>
                    </div>
                    <button
                      onClick={() => setShowAddSignatureModal(true)}
                      className="text-blue-300 hover:text-blue-200 text-lg font-semibold"
                      title="Add New Signature"
                    >
                      +
                    </button>
                  </div>
                  
                  {/* User Name Display */}
                  <div className="ml-4 mb-2 p-2 bg-slate-700 rounded text-xs">
                    <div className="flex items-center justify-between">
                      <button
                        onClick={() => setShowSignatureManager(true)}
                        className="text-slate-300 hover:text-blue-200 transition-colors flex-1 text-left"
                      >
                        User: {userName}
                      </button>
                      <button
                        onClick={() => {
                          const newName = prompt("Enter your name:", userName);
                          if (newName && newName.trim()) {
                            updateUserName(newName.trim());
                          }
                        }}
                        className="text-blue-400 hover:text-blue-300 transition-colors ml-2"
                      >
                        ✏️
                      </button>
                    </div>
                  </div>
                  
                  {/* Selected Signature Indicator */}
                  {selectedSignature && (
                    <div className="ml-4 mb-2 p-2 bg-slate-700 rounded text-xs">
                      <div className="flex items-center justify-between">
                        <span className="text-slate-300">Selected: {selectedSignature.name}</span>
                        <button
                          onClick={() => setSelectedSignature(null)}
                          className="text-slate-400 hover:text-red-400 transition-colors"
                        >
                          ×
                        </button>
                      </div>
                    </div>
                  )}
                  
                  {/* Signature Dropdown */}
                  {showSignatureDropdown && (
                    <div className="ml-4 space-y-2">
                      <button
                        onClick={() => {
                          setShowSignaturePad(true);
                          setShowSignatureDropdown(false);
                        }}
                        className="flex items-center space-x-2 w-full text-left px-2 py-1 text-xs text-slate-300 hover:bg-slate-700 rounded transition-colors"
                      >
                        <span>✏️</span>
                        <span>Draw New Signature</span>
                      </button>
                      
                      <div className="border-t border-slate-600 my-2"></div>
                      
                      <div className="px-2 py-1">
                        <p className="text-xs text-slate-500 mb-2">Saved Signatures:</p>
                        {savedSignatures.length > 0 ? (
                          savedSignatures.map((sig, index) => (
                            <div
                              key={index}
                              draggable
                              onDragStart={(e) => {
                                e.dataTransfer.setData('text/plain', JSON.stringify(sig));
                                e.dataTransfer.effectAllowed = 'copy';
                              }}
                              className="flex items-center space-x-2 w-full text-left px-2 py-1 text-xs text-slate-300 hover:bg-slate-700 rounded transition-colors cursor-pointer group"
                            >
                              <button
                                onClick={() => {
                                  setSelectedSignature(sig);
                                  setShowSignatureDropdown(false);
                                }}
                                className="flex items-center space-x-2 flex-1"
                              >
                                <span>📄</span>
                                <span>{sig.name}</span>
                              </button>
                              <button
                                onClick={() => {
                                  setViewingSignature(sig);
                                  setShowSignatureViewer(true);
                                }}
                                className="opacity-0 group-hover:opacity-100 transition-opacity text-blue-400 hover:text-blue-300"
                                title="View signature"
                              >
                                👁️
                              </button>
                              <span className="opacity-0 group-hover:opacity-100 transition-opacity text-slate-500 text-xs">
                                Drag to document
                              </span>
                            </div>
                          ))
                        ) : (
                          <p className="text-xs text-slate-500 italic">No saved signatures</p>
                        )}
                      </div>
                      
                      <div className="border-t border-slate-600 my-2"></div>
                      
                      <div className="px-2 py-1">
                        <p className="text-xs text-slate-500 mb-2">Auto-generated:</p>
                        <button
                          onClick={() => {
                            const firstName = userName.split(' ')[0];
                            setSelectedSignature({ 
                              name: `${firstName} (Auto)`, 
                              dataUrl: generateAutoSignature(firstName) 
                            });
                            setShowSignatureDropdown(false);
                          }}
                          className="flex items-center space-x-2 w-full text-left px-2 py-1 text-xs text-slate-300 hover:bg-slate-700 rounded transition-colors"
                        >
                          <span>👤</span>
                          <span>{userName.split(' ')[0]} (Auto)</span>
                        </button>
                        <div className="ml-6 mb-2">
                          <img 
                            src={generateAutoSignature(userName.split(' ')[0])} 
                            alt="First name signature preview" 
                            className="h-8 object-contain bg-white rounded border"
                          />
                        </div>
                        
                        <button
                          onClick={() => {
                            setSelectedSignature({ 
                              name: `${userName} (Auto)`, 
                              dataUrl: generateAutoSignature(userName) 
                            });
                            setShowSignatureDropdown(false);
                          }}
                          className="flex items-center space-x-2 w-full text-left px-2 py-1 text-xs text-slate-300 hover:bg-slate-700 rounded transition-colors"
                        >
                          <span>👤</span>
                          <span>{userName} (Auto)</span>
                        </button>
                        <div className="ml-6 mb-2">
                          <img 
                            src={generateAutoSignature(userName)} 
                            alt="Full name signature preview" 
                            className="h-8 object-contain bg-white rounded border"
                          />
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </>
            )}
          </div>
        </div>

        {/* User Profile */}
        <div className="p-4 border-t border-slate-700">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <button
                onClick={() => setShowSettings(true)}
                className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center relative hover:bg-blue-600 transition-colors cursor-pointer"
              >
                <span className="text-white text-sm font-bold">U</span>
                <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-slate-800"></div>
              </button>
              {!sidebarCollapsed && (
                <div>
                  <p className="text-white text-sm font-medium">User</p>
                  <p className="text-slate-400 text-xs">Online</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col md:flex-1">
        {/* Header */}
        <div className="h-12 bg-slate-800 border-b border-slate-700 flex items-center px-4">
          <div className="flex items-center space-x-3">
            <div>
              <div className="flex items-center space-x-4 text-sm text-slate-400">
                <p>
                  {currentChannel
                    ? `Welcome to the ` 
                    : currentDM
                    ? `Direct message with `
                    : "Welcome to the "}
                  <span className="font-bold text-white">
                    {currentChannel || (currentDM ? currentDM.name : "general")}
                  </span>
                  {currentChannel
                    ? ` channel`
                    : currentDM
                    ? ""
                    : " discussion channel"}
                </p>
                {currentChannel && channels.find(c => c.name === currentChannel)?.doorNumber && (
                  <span className="text-blue-400 font-medium">
                    🚪 {channels.find(c => c.name === currentChannel)?.doorNumber}
                  </span>
                )}
                {currentChannel && channels.find(c => c.name === currentChannel)?.description && (
                  <span className="text-slate-300">
                    • {channels.find(c => c.name === currentChannel)?.description}
                  </span>
                )}
              </div>
            </div>
          </div>
          <div className="ml-auto flex items-center space-x-2">
            <input
              type="text"
              placeholder="Search messages or users..."
              className="hidden md:block w-64 px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <button className="hidden md:block p-2 text-slate-400 hover:text-white hover:bg-slate-700 rounded">
              🔍
            </button>
            <button className="hidden md:block p-2 text-slate-400 hover:text-white hover:bg-slate-700 rounded">
              📞
            </button>
            <div className="relative" ref={moreMenuRef}>
              <button
                onClick={() => setShowMoreMenu(!showMoreMenu)}
                className="p-2 text-slate-400 hover:text-white hover:bg-slate-700 rounded"
              >
                ⋯
              </button>
              {showMoreMenu && (
                <div className="absolute right-0 top-full mt-1 bg-slate-800 border border-slate-700 rounded-lg shadow-lg z-50 min-w-48">
                  <div className="py-2">
                    <button className="w-full px-4 py-2 text-left text-slate-300 hover:bg-slate-700 flex items-center space-x-2">
                      <span>👥</span>
                      <span>Add users</span>
                    </button>
                    <button className="w-full px-4 py-2 text-left text-slate-300 hover:bg-slate-700 flex items-center space-x-2">
                      <span>📧</span>
                      <span>Invite users</span>
                    </button>
                    <div className="border-t border-slate-700 my-1"></div>
                    <button className="w-full px-4 py-2 text-left text-slate-300 hover:bg-slate-700 flex items-center space-x-2">
                      <span>📊</span>
                      <span>Channel analytics</span>
                    </button>
                    <button className="w-full px-4 py-2 text-left text-slate-300 hover:bg-slate-700 flex items-center space-x-2">
                      <span>🔧</span>
                      <span>Channel settings</span>
                    </button>
                    <div className="border-t border-slate-700 my-1"></div>
                    <button className="w-full px-4 py-2 text-left text-red-400 hover:bg-slate-700 flex items-center space-x-2">
                      <span>🚪</span>
                      <span>Leave channel</span>
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-4 md:p-6 space-y-4 md:space-y-6 pb-20 md:pb-4">
          {(currentChannel
            ? channelMessages[currentChannel] || []
            : messages
          ).map((message) => (
            <div key={message.id} className="flex items-start space-x-4">
              <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center">
                <span className="text-white text-lg">
                  {message.user === "You"
                    ? "U"
                    : message.user === "System"
                    ? "S"
                    : "U"}
                </span>
              </div>
              <div className="flex-1">
                <div className="flex items-baseline space-x-3">
                  <span className="font-semibold text-white">
                    {message.user}
                  </span>
                  <span className="text-slate-400 text-sm">
                    {message.timestamp}
                  </span>
                </div>
                <div className="text-slate-300 mt-1">{message.text}</div>
              </div>
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>

        {/* Message Input */}
        <div className="p-4 border-t border-slate-700 pb-20 md:pb-4">
          <div className="flex items-center space-x-2">
            <div className="relative">
              <button
                onClick={() => setShowAttachmentMenu(!showAttachmentMenu)}
                className="p-2 text-slate-400 hover:text-white"
              >
                📤
              </button>
              {showAttachmentMenu && (
                <div className="absolute bottom-full right-0 mb-2 bg-slate-800 border border-slate-700 rounded-lg shadow-lg z-50 min-w-48">
                  <div className="py-2">
                    <button
                      onClick={() => {
                        handleDocumentUpload();
                        setShowAttachmentMenu(false);
                      }}
                      className="w-full px-4 py-2 text-left text-slate-300 hover:bg-slate-700 flex items-center space-x-2"
                    >
                      <span>📄</span>
                      <span>Document</span>
                    </button>
                    <div className="relative">
                      <button
                        onClick={() => setShowImageSubmenu(!showImageSubmenu)}
                        className="w-full px-4 py-2 text-left text-slate-300 hover:bg-slate-700 flex items-center justify-between"
                      >
                        <div className="flex items-center space-x-2">
                          <span>🖼️</span>
                          <span>Image</span>
                        </div>
                        <span>▶</span>
                      </button>
                      {showImageSubmenu && (
                        <div className="absolute left-full top-0 ml-1 bg-slate-800 border border-slate-700 rounded-lg shadow-lg z-50 min-w-40">
                          <div className="py-2">
                            <button
                              onClick={() => {
                                alert("Opening camera...");
                                setShowImageSubmenu(false);
                                setShowAttachmentMenu(false);
                              }}
                              className="w-full px-4 py-2 text-left text-slate-300 hover:bg-slate-700 flex items-center space-x-2"
                            >
                              <span>📷</span>
                              <span>Camera</span>
                            </button>
                            <button
                              onClick={() => {
                                handleImagePicker();
                                setShowImageSubmenu(false);
                                setShowAttachmentMenu(false);
                              }}
                              className="w-full px-4 py-2 text-left text-slate-300 hover:bg-slate-700 flex items-center space-x-2"
                            >
                              <span>🖼️</span>
                              <span>Image Picker</span>
                            </button>
                          </div>
                        </div>
                      )}
                    </div>
                    <div className="relative">
                      <button
                        onClick={() => setShowVideoSubmenu(!showVideoSubmenu)}
                        className="w-full px-4 py-2 text-left text-slate-300 hover:bg-slate-700 flex items-center justify-between"
                      >
                        <div className="flex items-center space-x-2">
                          <span>🎥</span>
                          <span>Video</span>
                        </div>
                        <span>▶</span>
                      </button>
                      {showVideoSubmenu && (
                        <div className="absolute left-full top-0 ml-1 bg-slate-800 border border-slate-700 rounded-lg shadow-lg z-50 min-w-40">
                          <div className="py-2">
                            <button
                              onClick={() => {
                                alert("Opening video camera...");
                                setShowVideoSubmenu(false);
                                setShowAttachmentMenu(false);
                              }}
                              className="w-full px-4 py-2 text-left text-slate-300 hover:bg-slate-700 flex items-center space-x-2"
                            >
                              <span>📹</span>
                              <span>Camera</span>
                            </button>
                            <button
                              onClick={() => {
                                handleVideoPicker();
                                setShowVideoSubmenu(false);
                                setShowAttachmentMenu(false);
                              }}
                              className="w-full px-4 py-2 text-left text-slate-300 hover:bg-slate-700 flex items-center space-x-2"
                            >
                              <span>🎥</span>
                              <span>Video Picker</span>
                            </button>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              )}
            </div>
            <div className="flex-1 relative">
              <input
                type="text"
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && sendMessage()}
                placeholder="Type your message..."
                className="w-full px-4 py-2 bg-slate-700 border border-slate-600 rounded text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <button
              onClick={() => setShowPushToTalk(true)}
              className="p-2 text-slate-400 hover:text-white"
            >
              🎤
            </button>
            <button
              onClick={sendMessage}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Send
            </button>
          </div>
        </div>
      </div>

      {/* Modals */}
      {showCreateChannelModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-slate-800 p-6 rounded-lg w-96">
            <h3 className="text-white text-lg font-semibold mb-4">
              Create Channel
            </h3>
            <input
              type="text"
              placeholder="Channel name (PO Number)"
              value={newChannelName}
              onChange={(e) => setNewChannelName(e.target.value)}
              className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white mb-4"
            />
            <div className="mb-4">
              <label className="block text-slate-300 text-sm mb-2">Door Number</label>
              <input
                type="text"
                placeholder="e.g., D-12, D-08"
                value={newChannelDoorNumber}
                onChange={(e) => setNewChannelDoorNumber(e.target.value)}
                className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
              />
            </div>
            <textarea
              placeholder="Description (e.g., hot load, late, early)"
              value={newChannelDescription}
              onChange={(e) => setNewChannelDescription(e.target.value)}
              className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white mb-4 resize-none"
              rows={3}
            />
            <div className="mb-4">
              <label className="block text-slate-300 text-sm mb-2">Visibility</label>
              <select
                value={newChannelVisibility}
                onChange={(e) => setNewChannelVisibility(e.target.value)}
                className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
              >
                <option value="public">Public - Anyone can join</option>
                <option value="private">Private - Invite only</option>
              </select>
            </div>
            <div className="flex space-x-2">
              <button
                onClick={() => {
                  setShowCreateChannelModal(false);
                  setNewChannelName("");
                  setNewChannelDescription("");
                  setNewChannelVisibility("public");
                  setNewChannelDoorNumber("");
                }}
                className="flex-1 px-4 py-2 bg-slate-600 text-white rounded hover:bg-slate-700"
              >
                Cancel
              </button>
              <button
                onClick={() => {
                  if (newChannelName.trim()) {
                    const newChannel = {
                      id: Date.now(),
                      name: newChannelName.trim(),
                      description: newChannelDescription.trim(),
                      visibility: newChannelVisibility,
                      doorNumber: newChannelDoorNumber.trim(),
                      unread: 0,
                      active: false,
                    };
                    setChannels((prev) => [...prev, newChannel]);
                    setShowCreateChannelModal(false);
                    setNewChannelName("");
                    setNewChannelDescription("");
                    setNewChannelVisibility("public");
                    setNewChannelDoorNumber("");
                  }
                }}
                className="flex-1 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
              >
                Create
              </button>
            </div>
          </div>
        </div>
      )}

      {showPushToTalk && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-slate-800 p-6 rounded-lg w-96 text-center">
            <h3 className="text-white text-lg font-semibold mb-4">
              Push-to-Talk
            </h3>
            <div className="mb-4">
              <button
                onMouseDown={startRecording}
                onMouseUp={stopRecording}
                onTouchStart={startRecording}
                onTouchEnd={stopRecording}
                className="w-20 h-20 bg-red-500 rounded-full flex items-center justify-center text-white text-2xl hover:bg-red-600"
              >
                🎤
              </button>
            </div>
            <p className="text-slate-300 mb-4">
              {isRecording
                ? `Recording... ${recordingTime}s`
                : "Hold to record"}
            </p>
            <button
              onClick={() => setShowPushToTalk(false)}
              className="px-4 py-2 bg-slate-600 text-white rounded hover:bg-slate-700"
            >
              Close
            </button>
          </div>
        </div>
      )}

      {showDocumentManager && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-slate-800 p-6 rounded-lg w-3/4 h-3/4 flex flex-col">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-white text-lg font-semibold">
                Document Manager
              </h3>
              <button
                onClick={() => setShowDocumentManager(false)}
                className="text-slate-400 hover:text-white"
              >
                ✕
              </button>
            </div>
            <div className="flex-1 overflow-y-auto">
              {documents.map((doc) => (
                <div
                  key={doc.id}
                  className="flex items-center justify-between p-3 border-b border-slate-700"
                >
                  <div className="flex items-center space-x-3">
                    <span>📄</span>
                    <div>
                      <p className="text-white">{doc.name}</p>
                      <p className="text-slate-400 text-sm">
                        {doc.size} • {doc.date}
                      </p>
                    </div>
                  </div>
                  <div className="flex space-x-2">
                    <button className="px-3 py-1 bg-blue-500 text-white rounded text-sm">
                      Sign
                    </button>
                    <button className="px-3 py-1 bg-slate-600 text-white rounded text-sm">
                      Download
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {showSettings && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex z-50" onClick={() => setShowSettings(false)}>
          <div className="absolute bottom-20 left-4 bg-slate-800 rounded-lg w-80 shadow-xl" ref={settingsRef} onClick={(e) => e.stopPropagation()}>
            {/* Menu Items */}
            <div className="p-2">
              <button className="w-full px-4 py-3 text-left text-slate-300 hover:bg-slate-700 rounded-lg flex items-center space-x-3">
                <span className="text-lg">👤</span>
                <span>banjahmarah@gmail.com</span>
              </button>
              
              <button className="w-full px-4 py-3 text-left text-slate-300 hover:bg-slate-700 rounded-lg flex items-center space-x-3">
                <span className="text-lg">⭐</span>
                <span>Upgrade plan</span>
              </button>
              
              <button 
                onClick={() => {
                  setShowProfilePage(true);
                  setShowSettings(false);
                }}
                className="w-full px-4 py-3 text-left text-slate-300 hover:bg-slate-700 rounded-lg flex items-center space-x-3"
              >
                <span className="text-lg">👤</span>
                <span>Profile</span>
              </button>
              
              <button 
                onClick={() => {
                  setShowAccountPage(true);
                  setShowSettings(false);
                }}
                className="w-full px-4 py-3 text-left text-slate-300 hover:bg-slate-700 rounded-lg flex items-center space-x-3"
              >
                <span className="text-lg">🔧</span>
                <span>Account</span>
              </button>
              
              <button className="w-full px-4 py-3 text-left text-slate-300 hover:bg-slate-700 rounded-lg flex items-center space-x-3">
                <span className="text-lg">🔧</span>
                <span>Settings</span>
              </button>
              
              <div className="border-t border-slate-700 my-2"></div>
              
              <button 
                onClick={() => {
                  setShowHelpPage(true);
                  setShowSettings(false);
                }}
                className="w-full px-4 py-3 text-left text-slate-300 hover:bg-slate-700 rounded-lg flex items-center justify-between"
              >
                <div className="flex items-center space-x-3">
                  <span className="text-lg">🎯</span>
                  <span>Help</span>
                </div>
                <span className="text-slate-400">></span>
              </button>
              
              <button className="w-full px-4 py-3 text-left text-red-400 hover:bg-slate-700 rounded-lg flex items-center space-x-3">
                <span className="text-lg">🚪</span>
                <span>Log out</span>
              </button>
            </div>
            
            {/* User Profile Section */}
            <div className="border-t border-slate-700 p-4">
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center">
                  <span className="text-white text-sm font-bold">U</span>
                </div>
                <div>
                  <p className="text-white font-semibold">BANJAH MARAH</p>
                  <p className="text-slate-400 text-sm">Plus</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Profile Page Modal */}
      {showProfilePage && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-slate-800 rounded-lg w-96 shadow-xl">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-white text-lg font-semibold">Profile</h3>
                <button
                  onClick={() => setShowProfilePage(false)}
                  className="text-slate-400 hover:text-white"
                >
                  ✕
                </button>
              </div>
              
              <div className="space-y-4">
                <div className="flex items-center space-x-4">
                  <div className="w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center">
                    <span className="text-white text-xl font-bold">U</span>
                  </div>
                  <div>
                    <h4 className="text-white font-semibold">BANJAH MARAH</h4>
                    <p className="text-slate-400 text-sm">Online</p>
                  </div>
                </div>
                
                <div className="space-y-3">
                  <div>
                    <label className="block text-slate-400 text-sm mb-1">Full Name</label>
                    <input 
                      type="text" 
                      defaultValue="BANJAH MARAH"
                      className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-slate-400 text-sm mb-1">Email Address</label>
                    <input 
                      type="email" 
                      defaultValue="banjahmarah@gmail.com"
                      className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-slate-400 text-sm mb-1">Phone Number</label>
                    <input 
                      type="tel" 
                      defaultValue="+1-555-0123"
                      className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-slate-400 text-sm mb-1">Bio</label>
                    <textarea 
                      defaultValue="Digital Ocean enthusiast and developer"
                      rows={3}
                      className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>
                
                <div className="flex space-x-3 pt-4">
                  <button className="flex-1 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                    Save Changes
                  </button>
                  <button 
                    onClick={() => setShowProfilePage(false)}
                    className="px-4 py-2 bg-slate-600 text-white rounded hover:bg-slate-700"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Account Page Modal */}
      {showAccountPage && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-slate-800 rounded-lg w-96 shadow-xl max-h-[90vh] flex flex-col">
            <div className="p-6 border-b border-slate-700">
              <div className="flex items-center justify-between">
                <h3 className="text-white text-lg font-semibold">Account</h3>
                <button
                  onClick={() => setShowAccountPage(false)}
                  className="text-slate-400 hover:text-white"
                >
                  ✕
                </button>
              </div>
            </div>
            
            <div className="flex-1 overflow-y-auto p-6">
              <div className="space-y-6">
                <div className="bg-slate-700 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-3">
                    <h4 className="text-white font-semibold">Current Plan</h4>
                    <span className="px-2 py-1 bg-blue-500 text-white text-xs rounded">Plus</span>
                  </div>
                  <p className="text-slate-400 text-sm mb-3">You're currently on the Plus plan with advanced features.</p>
                  <button className="w-full px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                    Upgrade to Pro
                  </button>
                </div>
                
                <div className="space-y-3">
                  <div>
                    <label className="block text-slate-400 text-sm mb-1">Username</label>
                    <input 
                      type="text" 
                      defaultValue="banjahmarah"
                      className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-slate-400 text-sm mb-1">Current Password</label>
                    <input 
                      type="password" 
                      placeholder="Enter current password"
                      className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-slate-400 text-sm mb-1">New Password</label>
                    <input 
                      type="password" 
                      placeholder="Enter new password"
                      className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-slate-400 text-sm mb-1">Confirm New Password</label>
                    <input 
                      type="password" 
                      placeholder="Confirm new password"
                      className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>
                
                <div className="border-t border-slate-700 pt-4">
                  <h4 className="text-white font-semibold mb-3">Account Status</h4>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-slate-400 text-sm">Email Verified</span>
                      <span className="text-green-400 text-sm">✓ Verified</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-slate-400 text-sm">Two-Factor Auth</span>
                      <span className="text-red-400 text-sm">✗ Disabled</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-slate-400 text-sm">Last Login</span>
                      <span className="text-slate-400 text-sm">Today at 2:30 PM</span>
                    </div>
                  </div>
                </div>
                
                <div className="flex space-x-3 pt-4">
                  <button className="flex-1 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                    Save Changes
                  </button>
                  <button 
                    onClick={() => setShowAccountPage(false)}
                    className="px-4 py-2 bg-slate-600 text-white rounded hover:bg-slate-700"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Help Page Modal */}
      {showHelpPage && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-slate-800 rounded-lg w-[800px] shadow-xl max-h-[90vh] flex flex-col">
            <div className="p-6 border-b border-slate-700">
              <div className="flex items-center justify-between">
                <h3 className="text-white text-lg font-semibold">ChatDO Help Center</h3>
                <button
                  onClick={() => setShowHelpPage(false)}
                  className="text-slate-400 hover:text-white"
                >
                  ✕
                </button>
              </div>
            </div>
            
            <div className="flex-1 overflow-y-auto p-6">
              <div className="space-y-8">
                {/* Getting Started */}
                <div>
                  <h4 className="text-white text-xl font-semibold mb-4 flex items-center">
                    <span className="mr-2">🚀</span>
                    Getting Started
                  </h4>
                  <div className="bg-slate-700 rounded-lg p-4 space-y-3">
                    <p className="text-slate-300">
                      Welcome to ChatDO! This is a modern chat platform designed for Digital Ocean developers and teams. 
                      The interface is divided into several key areas that help you communicate effectively.
                    </p>
                    <p className="text-slate-300">
                      <strong>Quick Start:</strong> Click on any channel or direct message to start chatting. 
                      Use the message input at the bottom to send your messages.
                    </p>
                  </div>
                </div>

                {/* Sidebar Navigation */}
                <div>
                  <h4 className="text-white text-xl font-semibold mb-4 flex items-center">
                    <span className="mr-2">📋</span>
                    Sidebar Navigation
                  </h4>
                  <div className="bg-slate-700 rounded-lg p-4 space-y-4">
                    <div>
                      <h5 className="text-white font-semibold mb-2">📱 Collapsible Sidebar</h5>
                      <p className="text-slate-300 mb-2">
                        Click the <span className="bg-slate-600 px-1 rounded">◀</span> button next to "ChatDO" to collapse the sidebar. 
                        When collapsed, you'll see icon-only navigation for quick access.
                      </p>
                    </div>
                    
                    <div>
                      <h5 className="text-white font-semibold mb-2">🏠 Home Dashboard</h5>
                      <p className="text-slate-300 mb-2">
                        Click the home icon to view your workspace overview, including message statistics, 
                        active channels, and recent activity.
                      </p>
                    </div>

                    <div>
                      <h5 className="text-white font-semibold mb-2">💬 Text Channels</h5>
                      <p className="text-slate-300 mb-2">
                        Public channels for team discussions. Each channel shows unread message counts in red badges. 
                        Click the <span className="bg-slate-600 px-1 rounded">+</span> button to create new channels.
                      </p>
                    </div>

                    <div>
                      <h5 className="text-white font-semibold mb-2">👥 Direct Messages</h5>
                      <p className="text-slate-300 mb-2">
                        Private conversations with team members. Shows user avatars, names, and unread counts. 
                        Click the <span className="bg-slate-600 px-1 rounded">+</span> button to start new DMs.
                      </p>
                    </div>

                    <div>
                      <h5 className="text-white font-semibold mb-2">📁 Documents</h5>
                      <p className="text-slate-300 mb-2">
                        Access shared documents and files. Click to view the documents page with search, 
                        filtering, and management tools.
                      </p>
                    </div>

                    <div>
                      <h5 className="text-white font-semibold mb-2">📊 Activity Feed</h5>
                      <p className="text-slate-300 mb-2">
                        View all workspace activity, mentions, and notifications in chronological order.
                      </p>
                    </div>
                  </div>
                </div>

                {/* Main Chat Area */}
                <div>
                  <h4 className="text-white text-xl font-semibold mb-4 flex items-center">
                    <span className="mr-2">💬</span>
                    Main Chat Area
                  </h4>
                  <div className="bg-slate-700 rounded-lg p-4 space-y-4">
                    <div>
                      <h5 className="text-white font-semibold mb-2">📝 Message Input</h5>
                      <p className="text-slate-300 mb-2">
                        Type your message in the input field at the bottom. Press Enter or click "Send" to send your message.
                      </p>
                    </div>

                    <div>
                      <h5 className="text-white font-semibold mb-2">📤 Attachment Button</h5>
                      <p className="text-slate-300 mb-2">
                        Click the <span className="bg-slate-600 px-1 rounded">📤</span> button to attach files, images, or videos to your messages.
                      </p>
                    </div>

                    <div>
                      <h5 className="text-white font-semibold mb-2">🎤 Voice Recording</h5>
                      <p className="text-slate-300 mb-2">
                        Click the <span className="bg-slate-600 px-1 rounded">🎤</span> button to record voice messages. 
                        Hold to record, release to send.
                      </p>
                    </div>

                    <div>
                      <h5 className="text-white font-semibold mb-2">🔍 Search</h5>
                      <p className="text-slate-300 mb-2">
                        Use the search bar in the header to find messages, users, or files across the workspace.
                      </p>
                    </div>

                    <div>
                      <h5 className="text-white font-semibold mb-2">📞 Voice Call</h5>
                      <p className="text-slate-300 mb-2">
                        Click the <span className="bg-slate-600 px-1 rounded">📞</span> button to start voice calls with channel members.
                      </p>
                    </div>

                    <div>
                      <h5 className="text-white font-semibold mb-2">⋯ More Options</h5>
                      <p className="text-slate-300 mb-2">
                        Click the <span className="bg-slate-600 px-1 rounded">⋯</span> button for additional options like adding users, 
                        channel analytics, settings, and leaving channels.
                      </p>
                    </div>
                  </div>
                </div>

                {/* User Profile & Settings */}
                <div>
                  <h4 className="text-white text-xl font-semibold mb-4 flex items-center">
                    <span className="mr-2">👤</span>
                    User Profile & Settings
                  </h4>
                  <div className="bg-slate-700 rounded-lg p-4 space-y-4">
                    <div>
                      <h5 className="text-white font-semibold mb-2">👤 User Avatar</h5>
                      <p className="text-slate-300 mb-2">
                        Click your avatar (the blue "U" circle) in the sidebar to access your settings menu.
                      </p>
                    </div>

                    <div>
                      <h5 className="text-white font-semibold mb-2">📧 Email & Plan</h5>
                      <p className="text-slate-300 mb-2">
                        View your email address and current subscription plan (Plus/Pro) in the settings menu.
                      </p>
                    </div>

                    <div>
                      <h5 className="text-white font-semibold mb-2">👤 Profile Management</h5>
                      <p className="text-slate-300 mb-2">
                        Edit your name, email, phone number, and bio in the Profile section.
                      </p>
                    </div>

                    <div>
                      <h5 className="text-white font-semibold mb-2">🔧 Account Settings</h5>
                      <p className="text-slate-300 mb-2">
                        Manage your username, passwords, account status, and subscription in the Account section.
                      </p>
                    </div>

                    <div>
                      <h5 className="text-white font-semibold mb-2">🎯 Help & Support</h5>
                      <p className="text-slate-300 mb-2">
                        Access this help guide and additional support resources.
                      </p>
                    </div>

                    <div>
                      <h5 className="text-white font-semibold mb-2">🚪 Logout</h5>
                      <p className="text-slate-300 mb-2">
                        Safely log out of your account when you're done.
                      </p>
                    </div>
                  </div>
                </div>

                {/* Keyboard Shortcuts */}
                <div>
                  <h4 className="text-white text-xl font-semibold mb-4 flex items-center">
                    <span className="mr-2">⌨️</span>
                    Keyboard Shortcuts
                  </h4>
                  <div className="bg-slate-700 rounded-lg p-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-slate-300">Send Message</span>
                          <span className="text-slate-400">Enter</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-slate-300">New Line</span>
                          <span className="text-slate-400">Shift + Enter</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-slate-300">Search</span>
                          <span className="text-slate-400">Ctrl/Cmd + K</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-slate-300">Toggle Sidebar</span>
                          <span className="text-slate-400">Ctrl/Cmd + B</span>
                        </div>
                      </div>
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-slate-300">Next Channel</span>
                          <span className="text-slate-400">Ctrl/Cmd + ]</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-slate-300">Previous Channel</span>
                          <span className="text-slate-400">Ctrl/Cmd + [</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-slate-300">Mark as Read</span>
                          <span className="text-slate-400">Ctrl/Cmd + Shift + A</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-slate-300">Settings</span>
                          <span className="text-slate-400">Ctrl/Cmd + ,</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Tips & Best Practices */}
                <div>
                  <h4 className="text-white text-xl font-semibold mb-4 flex items-center">
                    <span className="mr-2">💡</span>
                    Tips & Best Practices
                  </h4>
                  <div className="bg-slate-700 rounded-lg p-4 space-y-3">
                    <div className="flex items-start space-x-2">
                      <span className="text-blue-400 mt-1">•</span>
                      <p className="text-slate-300">Use channels for team-wide discussions and DMs for private conversations.</p>
                    </div>
                    <div className="flex items-start space-x-2">
                      <span className="text-blue-400 mt-1">•</span>
                      <p className="text-slate-300">Keep your status updated so teammates know when you're available.</p>
                    </div>
                    <div className="flex items-start space-x-2">
                      <span className="text-blue-400 mt-1">•</span>
                      <p className="text-slate-300">Use the search function to quickly find past messages and files.</p>
                    </div>
                    <div className="flex items-start space-x-2">
                      <span className="text-blue-400 mt-1">•</span>
                      <p className="text-slate-300">Organize documents in the Documents section for easy team access.</p>
                    </div>
                    <div className="flex items-start space-x-2">
                      <span className="text-blue-400 mt-1">•</span>
                      <p className="text-slate-300">Check the Activity feed regularly to stay updated on workspace happenings.</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Signature Pad Modal */}
      {showSignaturePad && (
        <SignaturePad
          onSave={(signatureDataUrl) => {
            // Prompt user to name the signature
            const signatureName = prompt("Enter a name for this signature:");
            if (signatureName && signatureName.trim()) {
              const newSignature = {
                name: signatureName.trim(),
                dataUrl: signatureDataUrl
              };
              setSavedSignatures(prev => [...prev, newSignature]);
              setSelectedSignature(newSignature);
            }
            setShowSignaturePad(false);
          }}
          onCancel={() => setShowSignaturePad(false)}
        />
      )}

      {/* Add New Signature Modal */}
      {showAddSignatureModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-slate-800 p-6 rounded-lg w-[500px] max-w-[90vw]">
            <h3 className="text-white text-lg font-semibold mb-4">Add New Signature</h3>
            
            {/* Signature Type Selection */}
            <div className="mb-6">
              <p className="text-slate-300 mb-3">Choose how to create your signature:</p>
              <div className="space-y-3">
                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    name="signatureType"
                    value="auto"
                    checked={newSignatureType === "auto"}
                    onChange={() => setNewSignatureType("auto")}
                    className="text-blue-500"
                  />
                  <span className="text-slate-300">Auto-generate from name</span>
                </label>
                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    name="signatureType"
                    value="draw"
                    checked={newSignatureType === "draw"}
                    onChange={() => setNewSignatureType("draw")}
                    className="text-blue-500"
                  />
                  <span className="text-slate-300">Draw signature manually</span>
                </label>
              </div>
            </div>

            {/* Name Input for Auto-generation */}
            {newSignatureType === "auto" && (
              <div className="mb-6">
                <label className="block text-slate-300 text-sm font-medium mb-2">
                  Enter your name for signature generation:
                </label>
                <input
                  type="text"
                  value={newSignatureName}
                  onChange={(e) => setNewSignatureName(e.target.value)}
                  placeholder="e.g., John Doe"
                  className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                
                {/* Preview */}
                {newSignatureName.trim() && (
                  <div className="mt-4 p-3 bg-slate-700 rounded">
                    <p className="text-slate-300 text-sm mb-2">Preview:</p>
                    <img 
                      src={generateAutoSignature(newSignatureName.trim())} 
                      alt="Signature preview" 
                      className="h-12 object-contain bg-white rounded border"
                    />
                  </div>
                )}
              </div>
            )}

            {/* Action Buttons */}
            <div className="flex justify-end space-x-3">
              <button
                onClick={() => {
                  setShowAddSignatureModal(false);
                  setNewSignatureName("");
                  setNewSignatureType("auto");
                }}
                className="px-4 py-2 bg-slate-600 text-white rounded hover:bg-slate-500 transition-colors"
              >
                Cancel
              </button>
              
              {newSignatureType === "auto" ? (
                <button
                  onClick={() => {
                    if (newSignatureName.trim()) {
                      const newSignature = {
                        name: newSignatureName.trim(),
                        dataUrl: generateAutoSignature(newSignatureName.trim())
                      };
                      setSavedSignatures(prev => [...prev, newSignature]);
                      setSelectedSignature(newSignature);
                      setShowAddSignatureModal(false);
                      setNewSignatureName("");
                    }
                  }}
                  disabled={!newSignatureName.trim()}
                  className={`px-4 py-2 rounded transition-colors ${
                    newSignatureName.trim()
                      ? "bg-blue-500 text-white hover:bg-blue-600"
                      : "bg-slate-600 text-slate-400 cursor-not-allowed"
                  }`}
                >
                  Create Signature
                </button>
              ) : (
                <button
                  onClick={() => {
                    setShowAddSignatureModal(false);
                    setShowSignaturePad(true);
                  }}
                  className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
                >
                  Open Signature Pad
                </button>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Signature Viewer Modal */}
      {showSignatureViewer && viewingSignature && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-slate-800 p-6 rounded-lg w-[600px] max-w-[90vw]">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-white text-lg font-semibold">Signature: {viewingSignature.name}</h3>
              <button
                onClick={() => {
                  setShowSignatureViewer(false);
                  setViewingSignature(null);
                }}
                className="text-slate-400 hover:text-white transition-colors"
              >
                ✕
              </button>
            </div>
            
            <div className="bg-white rounded-lg p-6 mb-4 flex items-center justify-center">
              <img 
                src={viewingSignature.dataUrl} 
                alt={`Signature: ${viewingSignature.name}`}
                className="max-w-full max-h-64 object-contain"
              />
            </div>
            
            <div className="flex justify-between items-center">
              <div className="text-slate-300 text-sm">
                <p>Click and drag this signature to place it on documents</p>
              </div>
              <div className="flex space-x-3">
                <button
                  onClick={() => {
                    setSelectedSignature(viewingSignature);
                    setShowSignatureViewer(false);
                    setViewingSignature(null);
                  }}
                  className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
                >
                  Use This Signature
                </button>
                <button
                  onClick={() => {
                    setShowSignatureViewer(false);
                    setViewingSignature(null);
                  }}
                  className="px-4 py-2 bg-slate-600 text-white rounded hover:bg-slate-500 transition-colors"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Mobile Navigation */}
      <MobileNavigation 
        activeTab={activeMobileTab} 
        onTabChange={setActiveMobileTab} 
      />

      {/* Signature Manager Modal */}
    {showSignatureManager && (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-slate-800 p-6 rounded-lg w-[600px] max-w-[90vw] max-h-[80vh] flex flex-col">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-white text-lg font-semibold">Signature Manager - {userName}</h3>
            <button
              onClick={() => setShowSignatureManager(false)}
              className="text-slate-400 hover:text-white transition-colors"
            >
              ✕
            </button>
          </div>

          <div className="flex-1 overflow-y-auto">
            {/* Saved Signatures Section */}
            <div className="mb-6">
              <h4 className="text-blue-300 font-semibold mb-3">Saved Signatures</h4>
              {savedSignatures.length > 0 ? (
                <div className="space-y-3">
                  {savedSignatures.map((sig, index) => (
                    <div key={index} className="bg-slate-700 p-3 rounded flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <img
                          src={sig.dataUrl}
                          alt={`Signature: ${sig.name}`}
                          className="h-8 object-contain bg-white rounded border"
                        />
                        <span className="text-slate-300">{sig.name}</span>
                      </div>
                      <div className="flex space-x-2">
                        <button
                          onClick={() => {
                            setSelectedSignature(sig);
                            setShowSignatureManager(false);
                          }}
                          className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors text-sm"
                        >
                          Use
                        </button>
                        <button
                          onClick={() => {
                            setViewingSignature(sig);
                            setShowSignatureViewer(true);
                            setShowSignatureManager(false);
                          }}
                          className="px-3 py-1 bg-slate-600 text-white rounded hover:bg-slate-500 transition-colors text-sm"
                        >
                          View
                        </button>
                        <button
                          onClick={() => {
                            setSavedSignatures(prev => prev.filter((_, i) => i !== index));
                          }}
                          className="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 transition-colors text-sm"
                        >
                          Delete
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-slate-400 italic">No saved signatures yet.</p>
              )}
            </div>

            {/* Quick Create Section */}
            <div className="mb-6">
              <h4 className="text-blue-300 font-semibold mb-3">Quick Create</h4>
              <div className="grid grid-cols-2 gap-3">
                <button
                  onClick={() => {
                    const newSignature = {
                      name: userName,
                      dataUrl: generateAutoSignature(userName)
                    };
                    setSavedSignatures(prev => [...prev, newSignature]);
                    setSelectedSignature(newSignature);
                    setShowSignatureManager(false);
                  }}
                  className="p-3 bg-slate-700 rounded hover:bg-slate-600 transition-colors text-left"
                >
                  <div className="text-blue-300 font-medium mb-2">Auto-Generate Full Name</div>
                  <img
                    src={generateAutoSignature(userName)}
                    alt="Auto signature preview"
                    className="h-6 object-contain bg-white rounded border"
                  />
                </button>
                <button
                  onClick={() => {
                    const newSignature = {
                      name: userName.split(' ')[0],
                      dataUrl: generateAutoSignature(userName.split(' ')[0])
                    };
                    setSavedSignatures(prev => [...prev, newSignature]);
                    setSelectedSignature(newSignature);
                    setShowSignatureManager(false);
                  }}
                  className="p-3 bg-slate-700 rounded hover:bg-slate-600 transition-colors text-left"
                >
                  <div className="text-blue-300 font-medium mb-2">Auto-Generate First Name</div>
                  <img
                    src={generateAutoSignature(userName.split(' ')[0])}
                    alt="Auto signature preview"
                    className="h-6 object-contain bg-white rounded border"
                  />
                </button>
              </div>
            </div>

            {/* Create New Section */}
            <div>
              <h4 className="text-blue-300 font-semibold mb-3">Create New</h4>
              <div className="space-y-3">
                <button
                  onClick={() => {
                    setShowSignatureManager(false);
                    setShowAddSignatureModal(true);
                  }}
                  className="w-full p-3 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
                >
                  Create Custom Signature
                </button>
                <button
                  onClick={() => {
                    setShowSignatureManager(false);
                    setShowSignaturePad(true);
                  }}
                  className="w-full p-3 bg-slate-600 text-white rounded hover:bg-slate-500 transition-colors"
                >
                  Draw New Signature
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    )}
  );
}
